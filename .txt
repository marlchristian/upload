using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using YourProjectNamespace.Data; // Replace with your actual namespace
using YourProjectNamespace.Models; // Replace with your actual namespace

namespace YourProjectNamespace.Controllers
{
    public class QrFormsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public QrFormsController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: QrForms
        public async Task<IActionResult> Index()
        {
            var forms = await _context.QrForms.ToListAsync();
            return View(forms);
        }

        // GET: QrForms/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: QrForms/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(QrForm form)
        {
            if (ModelState.IsValid)
            {
                _context.Add(form);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(form);
        }

        // GET: QrForms/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
                return NotFound();

            var form = await _context.QrForms
                .FirstOrDefaultAsync(m => m.Id == id);

            if (form == null)
                return NotFound();

            return View(form);
        }

        // GET: QrForms/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
                return NotFound();

            var form = await _context.QrForms
                .FirstOrDefaultAsync(m => m.Id == id);

            if (form == null)
                return NotFound();

            return View(form);
        }

        // POST: QrForms/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var form = await _context.QrForms.FindAsync(id);
            if (form != null)
            {
                _context.QrForms.Remove(form);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool QrFormExists(int id)
        {
            return _context.QrForms.Any(e => e.Id == id);
        }
    }
}